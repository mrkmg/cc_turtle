--TGM Def
TGM = {}
TGM.__index = TGM

function TGM.init(x,y,z,d)
    local grid = {}
    setmetatable(grid,TGM)
    grid.x = x or 1
    grid.y = y or 1
    grid.z = z or 1
    grid.d = d or 0
    grid.checkFuel = true
    grid.fuelback = false
    return grid
end

function TGM:rotateRight()
    turtle.turnRight()
    self.d = (self.d + 1) % 4
end

function TGM:rotateLeft()
    turtle.turnLeft()
    self.d = (self.d - 1) % 4
end


function TGM:forward(kt)
    self:refuel()
    if kt == true then
        while turtle.forward() == false do
            sleep(1)
        end
        if     self:getD() == 0 then self.y = self.y + 1
        elseif self:getD() == 1 then self.x = self.x + 1
        elseif self:getD() == 2 then self.y = self.y - 1
        elseif self:getD() == 3 then self.x = self.x - 1
        end
        return true
    else
        if turtle.forward() then
            if     self:getD() == 0 then self.y = self.y + 1
            elseif self:getD() == 1 then self.x = self.x + 1
            elseif self:getD() == 2 then self.y = self.y - 1
            elseif self:getD() == 3 then self.x = self.x - 1
            end
            return true
        else
            sleep(1)
            return false
        end
    end
end

function TGM:back(kt)
    self:refuel()
    if kt == true then
        while turtle.back() == false do
            sleep(1)
        end
        if     self:getD() == 0 then self.y = self.y - 1
        elseif self:getD() == 1 then self.x = self.x - 1
        elseif self:getD() == 2 then self.y = self.y + 1
        elseif self:getD() == 3 then self.x = self.x + 1
        end
        return true
    else
        if turtle.back() then
            if     self:getD() == 0 then self.y = self.y - 1
            elseif self:getD() == 1 then self.x = self.x - 1
            elseif self:getD() == 2 then self.y = self.y + 1
            elseif self:getD() == 3 then self.x = self.x + 1
            end
            return true
        else
            sleep(1)
            return false
        end
    end
end

function TGM:up(kt)
    self:refuel()
    if kt == true then
        while turtle.up() == false do
            sleep(1)
        end
        self.z = self.z + 1
    else 
        if turtle.up() then
            self.z = self.z + 1
            return true
        else
            return false
        end
    end
end

function TGM:down(kt)
    self:refuel()
    if kt == true then
        while turtle.up == false do
            sleep(1)
        end
        self.z = self.z - 1
    else
        if turtle.down() then
            self.z = self.z - 1
        else
            sleep(1)
            return false
        end
    end
end

function TGM:rotateTo(d)
    if self.d == 0  then
        if d == 1 then
            self:rotateRight()
        elseif d == 2 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 3 then
            self:rotateLeft()
        end
    elseif self.d == 1 then
        if d == 2 then
            self:rotateRight()
        elseif d == 3 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 0 then
            self:rotateLeft()
        end
    elseif self.d == 2 then
        if d == 3 then
            self:rotateRight()
        elseif d == 0 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 1 then
            self:rotateLeft()
        end
    elseif self.d == 3  then
        if d == 0 then
            self:rotateRight()
        elseif d == 1 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 2 then
            self:rotateLeft()
        end
    end
end

function TGM:gotoX(x)
    -- X
    if self:getX() ~= x then
        if self:getD() == 0 or self:getD() == 2 then self:rotateTo(1) end
        while self:getX() < x do
            sleep(0.1)
            if self:getD() == 1 then
                self:forward()
            else 
                self:back()
            end
        end
        while self:getX() > x do
            sleep(0.1)
            if self:getD() == 1 then
                self:back()
            else 
                self:forward()
            end
        end
    end
end

function TGM:gotoY(y)
    -- Y
    if self:getY() ~= y then
        if self:getD() == 1 or self:getD() == 3 then self:rotateTo(0) end
        while self:getY() < y do
            sleep(0.1)
            if self:getD() == 0 then
                self:forward()
            else 
                self:back()
            end
        end
        while self:getY() > y do
            sleep(0.1)
            if self:getD() == 0 then
                self:back()
            else 
                self:forward()
            end
        end
    end
end

function TGM:gotoZ(z)
    -- Z
    while self:getZ() < z do
        self:up()
        sleep(0.1)
    end
    while self:getZ() > z do
        sleep(0.1)
        self:down()
    end
end

function TGM:moveTo(x,y,z)
    self:gotoX(x)
    self:gotoY(y)
    self:gotoZ(z)
end

function TGM:moveToReverse(x,y,z)
    self:gotoZ(z)
    self:gotoY(y)
    self:gotoX(x)
end

function TGM:refuel()
    if self.checkFuel then
        if turtle.getFuelLevel() == 0 then
            if turtle.getItemCount(16) <= 3 and self.fuelback == false then
                self.fuelback = true
                turtle.select(16)
                turtle.refuel(1)
                sleep(0.1)
                local returnX = self:getX()
                local returnY = self:getY()
                local returnZ = self:getZ()
                local returnD = self:getD()
                self:moveToReverse(1,0,1)
                while turtle.getItemCount(16) <= 3 do
                    clearScreen()
                    print("Waiting for fuel, press enter when ready")
                    read()
                end
                self.fuelback = false
                sleep(0.1)
                self:moveTo(returnX,returnY,returnZ)
                self:rotateTo(returnD)
            else
                turtle.select(16)
                turtle.refuel(1)
            end
            return true
        end
        return true
    else
        return true
    end
end

function TGM:getX()
    return self.x
end

function TGM:getY()
    return self.y
end

function TGM:getZ()
    return self.z
end

function TGM:getD()
    return self.d
end


function writeAt(string, columnVar, rowVar)
    term.setCursorPos( columnVar, rowVar )
    write(string)
end

function clearScreen()
    term.clear()
    writeAt("Build",5,1)
    term.setCursorPos( 1, 3 )
end

Dig = {}
Dig.__index = Dig

function Dig.init()
    local digitem = {}
    setmetatable(digitem,Dig)
    return digitem
end

function Dig:forward()
    local count = 0
    while turtle.detect() and count <= 256 do
        turtle.dig()
        count = count + 1
        sleep(1)
    end
    if count == 256 then
        return false
    else
        return true
    end
end

function Dig:up()
    local count = 0
    while turtle.detectUp() and count <= 256 do
        turtle.digUp()
        count = count + 1
        sleep(1)
    end
    if count == 256 then
        return false
    else
        return true
    end
end

function Dig:down()
    local count = 0
    while turtle.detectDown() and count <= 256 do
        turtle.digDown()
        count = count + 1
        sleep(1)
    end
    if count == 256 then
        return false
    else
        return true
    end
end

function makeTree()
  turtle.select(1)
  turtle.place()
end

function isTree()
  turtle.select(2)
  return turtle.compare()
end

function detectAndForceTree()

  turtle.select(2)
  while turtle.compare() == false do
    if turtle.getItemCount(3) > 0 then
        turtle.select(3)
        turtle.place()
    end
    sleep(1)
    turtle.select(2)
  end
end


function cutForward(maxDistance)
    local c = 0
    bot:rotateTo(0)
    while turtle.detect() == true do
        c = c + 1
        dig:forward()
        if c < maxDistance then bot:forward() end
    end
    bot:gotoY(0)
end

function cutBackward(maxDistance)
    local c = 0
    bot:rotateTo(2)
    while turtle.detect() == true do
        c = c + 1
        dig:forward()
        if c < maxDistance then bot:forward() end
    end
    bot:gotoY(0)
end

function cutLeft(maxDistance)
    local c = 0
    bot:rotateTo(3)
    while turtle.detect() == true do
        dig:forward()
        if c <= maxDistance then
            bot:forward()
            cutForward(maxDistance)
            cutBackward(maxDistance)
        end
        bot:rotateTo(3)
    end
    bot:gotoX(0)
end

function cutRight(maxDistance)
    local c = 0
    bot:rotateTo(1)
    
    while turtle.detect() == true do
        dig:forward()
        if c <= maxDistance then
            bot:forward()
            cutForward(maxDistance)
            cutBackward(maxDistance)
        end
        bot:rotateTo(1)
    end
    bot:gotoX(0)
end

function cutTree()
    local ch

    for ch=1,maxX do
        if ch == 1 then
            dig:forward()
            bot:forward()
        else
            dig:up()
            bot:up()
        end

        if ch >= su then
            cutForward(sq)
            cutBackward(sq)
            cutLeft(sq)
            cutRight(sq)
        end
        bot:gotoX(0)
        bot:gotoY(0)

        if turtle.detectUp() == false then
            break
        end
    end
    bot:gotoX(0)
    bot:gotoY(0)
    bot:gotoZ(1)
    bot:gotoY(-1)
    bot:rotateTo(0)
end

function depositWood()
  turtle.select(2)
  turtle.dropDown( turtle.getItemCount(2) - 1)
end

maxH = 8
sq = 2
su = 3

bot = TGM.init(0,-1,1,0)
dig = Dig.init()

while true do
  makeTree()
  detectAndForceTree()
  cutTree()
  depositWood()
end
