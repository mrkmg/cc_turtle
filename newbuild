local author = "mrkmg"
local project = "cc_turtle"
local branch = "master"

--TGM Def
TGM = {}
TGM.__index = TGM

function TGM.init(x,y,z,d)
    local grid = {}
    setmetatable(grid,TGM)
    grid.x = x or 1
    grid.y = y or 1
    grid.z = z or 1
    grid.d = d or 0
    grid.checkFuel = true
    grid.fuelback = false
    return grid
end

function TGM:rotateRight()
    turtle.turnRight()
    self.d = (self.d + 1) % 4
end

function TGM:rotateLeft()
    turtle.turnLeft()
    self.d = (self.d - 1) % 4
end


function TGM:forward(kt)
    self:refuel()
    if kt == true then
        while turtle.forward() == false do
            sleep(1)
        end
        if     self:getD() == 0 then self.y = self.y + 1
        elseif self:getD() == 1 then self.x = self.x + 1
        elseif self:getD() == 2 then self.y = self.y - 1
        elseif self:getD() == 3 then self.x = self.x - 1
        return true
    else
        if turtle.forward() then
            if     self:getD() == 0 then self.y = self.y + 1
            elseif self:getD() == 1 then self.x = self.x + 1
            elseif self:getD() == 2 then self.y = self.y - 1
            elseif self:getD() == 3 then self.x = self.x - 1
            return true
            end
        else
            sleep(1)
            return false
        end
    end
end

function TGM:back(kt)
    self:refuel()
    if kt == true then
        while turtle.back() == false do
            sleep(1)
        end
        if     self:getD() == 0 then self.y = self.y - 1
        elseif self:getD() == 1 then self.x = self.x - 1
        elseif self:getD() == 2 then self.y = self.y + 1
        elseif self:getD() == 3 then self.x = self.x + 1
        end
        return true
    else
        if turtle.back() then
            if     self:getD() == 0 then self.y = self.y - 1
            elseif self:getD() == 1 then self.x = self.x - 1
            elseif self:getD() == 2 then self.y = self.y + 1
            elseif self:getD() == 3 then self.x = self.x + 1
            end
            return true
        else
            sleep(1)
            return false
        end
    end
end

function TGM:up(kt)
    self:refuel()
    if kt == true then
        while turtle.up() == false do
            sleep(1)
        end
        self.z = self.z + 1
    else 
        if turtle.up() then
            self.z = self.z + 1
            return true
        else
            return false
        end
    end
end

function TGM:down(kt)
    self:refuel()
    if kt == true then
        while turtle.up == false do
            sleep(1)
        end
        self.z = self.z - 1
    else
        if turtle.down() then
            self.z = self.z - 1
        else
            sleep(1)
            return false
        end
    end
end

function TGM:rotateTo(d)
    if self.d == 0  then
        if d == 1 then
            self:rotateRight()
        elseif d == 2 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 3 then
            self:rotateLeft()
        end
    elseif self.d == 1 then
        if d == 2 then
            self:rotateRight()
        elseif d == 3 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 0 then
            self:rotateLeft()
        end
    elseif self.d == 2 then
        if d == 3 then
            self:rotateRight()
        elseif d == 0 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 1 then
            self:rotateLeft()
        end
    elseif self.d == 3  then
        if d == 0 then
            self:rotateRight()
        elseif d == 1 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 2 then
            self:rotateLeft()
        end
    end
end

function TGM:gotoX(x)
    -- X
    if self:getX() ~= x then
        if self:getD() == 0 or self:getD() == 2 then self:rotateTo(1) end
        while self:getX() < x do
            sleep(0.1)
            if self:getD() == 1 then
                self:forward()
            else 
                self:back()
            end
        end
        while self:getX() > x do
            sleep(0.1)
            if self:getD() == 1 then
                self:back()
            else 
                self:forward()
            end
        end
    end
end

function TGM:gotoY(y)
    -- Y
    if self:getY() ~= y then
        if self:getD() == 1 or self:getD() == 3 then self:rotateTo(0) end
        while self:getY() < y do
            sleep(0.1)
            if self:getD() == 0 then
                self:forward()
            else 
                self:back()
            end
        end
        while self:getY() > y do
            sleep(0.1)
            if self:getD() == 0 then
                self:back()
            else 
                self:forward()
            end
        end
    end
end

function TGM:gotoZ(z)
    -- Z
    while self:getZ() < z do
        self:up()
        sleep(0.1)
    end
    while self:getZ() > z do
        sleep(0.1)
        self:down()
    end
end

function TGM:moveTo(x,y,z)
    self:gotoX(x)
    self:gotoY(y)
    self:gotoZ(z)
end

function TGM:moveToReverse(x,y,z)
    self:gotoZ(z)
    self:gotoY(y)
    self:gotoX(x)
end

function TGM:refuel()
    if self.checkFuel then
        if turtle.getFuelLevel() == 0 then
            if turtle.getItemCount(16) <= 3 and self.fuelback == false then
                self.fuelback = true
                turtle.select(16)
                turtle.refuel(1)
                sleep(0.1)
                local returnX = self:getX()
                local returnY = self:getY()
                local returnZ = self:getZ()
                local returnD = self:getD()
                self:moveToReverse(1,0,1)
                while turtle.getItemCount(16) <= 3 do
                    clearScreen()
                    print("Waiting for fuel, press enter when ready")
                    read()
                end
                self.fuelback = false
                sleep(0.1)
                self:moveTo(returnX,returnY,returnZ)
                self:rotateTo(returnD)
            else
                turtle.select(16)
                turtle.refuel(1)
            end
            return true
        end
        return true
    else
        return true
    end
end

function TGM:getX()
    return self.x
end

function TGM:getY()
    return self.y
end

function TGM:getZ()
    return self.z
end

function TGM:getD()
    return self.d
end

function pickupMatsForMatplan(matplan)
    local i
    local j
    for i=1,15 do
        if matplan.blocks[i] > 0 then
            bot:moveTo(boxes[matplan.blocks[i].x],boxes[matplan.blocks[i].y],boxes[matplan.blocks[i].z]+1)
            turtle.select(i)
            while turtle.suckDown() == false and turtle.getItemCount(i) < matplan.counts[i] do
                print("Please refill crate and press enter.")
                read()
            end
            if turtle.getItemCount(i) > matplan.counts[i] then
                turtle.dropDown(turtle.getItemCount(i) - matplan.counts[i])
            end
            if i < 15 and turtle.getItemCount(i+1) > 0 then
                turtle.select(i + 1)
                turtle.dropDown(turtle.getItemCount(i+1))
            end
        end
    end
end

function buildMatPlan(plan,i)
    local matplan = {}
    matplan.blocks = {}
    matplan.counts = {}
    matplan.blocks[1] = 0
    matplan.blocks[2] = 0
    matplan.blocks[3] = 0
    matplan.blocks[4] = 0
    matplan.blocks[5] = 0
    matplan.blocks[6] = 0
    matplan.blocks[7] = 0
    matplan.blocks[8] = 0
    matplan.blocks[9] = 0
    matplan.blocks[10] = 0
    matplan.blocks[11] = 0
    matplan.blocks[12] = 0
    matplan.blocks[13] = 0
    matplan.blocks[14] = 0
    matplan.blocks[15] = 0
    matplan.counts[1] = 0
    matplan.counts[2] = 0
    matplan.counts[3] = 0
    matplan.counts[4] = 0
    matplan.counts[5] = 0
    matplan.counts[6] = 0
    matplan.counts[7] = 0
    matplan.counts[8] = 0
    matplan.counts[9] = 0
    matplan.counts[10] = 0
    matplan.counts[11] = 0
    matplan.counts[12] = 0
    matplan.counts[13] = 0
    matplan.counts[14] = 0
    matplan.counts[15] = 0

    local nextblock

    local continue = true
    local dslot
    local o
    while continue == true do
        nextblock = plan[i].b
        dslot = 0
        o = 1
        while dslot = 0 and o <= 15 do
            if matplan.blocks[o] == 0 or ( matplan.blocks[o] == nextblock and matplan.counts[o] < 64 ) then
                matplan.blocks[o] == nextblock
                dslot = o
            end
        end
        if dslot > 0 then
            matplan.counts[dslot] = matplan.counts[dslot] + 1
            i = i + 1
        else
            continue = false
        end
    end

    return matplan
end

function getSlotForTypeFromMatplan(b,matplan)
    local i = 1
    local s = 0
    for while i <= 15 and s == 0 do
        if matplan.blocks[i] == b and matplan.counts[i] > 0 then
            s = i
        end
        i = i + 1
    end
    return s
end

function runPlan(plan)
    local i
    local cx
    local cy
    local cz
    local cb
    local cs
    local matplan = buildMatPlan(plan,0)
    pickupMatsForMatplan(matplan)
    for i=0,table.maxn(plan) do
         cx = plan[i].x
         cy = plan[i].y
         cz = plan[i].z
         cb = plan[i].b
         
         cs = getSlotForTypeFromMatplan(cb,matplan)
         if cs == 0 then
            buildMatPlan(plan,i)
            pickupMatsForMatplan(matplan)
            cs = getSlotForTypeFromMatplan(cb,matplan)
        end

        matplan.counts[cs] = matplan.counts[cs] - 1

        turtle.select(cs)
        bot:moveTo(cx,cy,cz+1)
        turtle.placeDown()
    end
end

function buildPlan(template)
    local plan = {}
    local commands
    local x
    local y
    local z
    local b
    local i = 0

    local f = fs.open(template, "r")
    local line = f.readLine()

    while line ~= nil do
        commands = split(line," ")
        x = commands[0]
        y = commands[1]
        z = commands[2]
        b = commands[3]
        plan[i] = {}
        plan[i].x = x
        plan[i].y = y
        plan[i].z = z
        plan[i].b = b
        i = i + 1
        line = f.readLine()
    end
    return plan
end

function writeAt(string, columnVar, rowVar)
    term.setCursorPos( columnVar, rowVar )
    write(string)
end

function clearScreen()
    term.clear()
    writeAt("Build",5,1)
    term.setCursorPos( 1, 3 )
end

function askString(question)
    local ans
    local cont = true
    clearScreen()
    while cont == true do -- Width Question
        print(question)
        ans = read()
        clearScreen()
        if ans == nil then
            print( "Please answer with something" )
        else
            cont = false
        end
    end
    return ans
end

function main()
    local plan = buildPlan(template)
    runPlan(plan)

    bot:moveTo(homeLocation.x,homeLocation.y,homeLocation.z)
end

homeLocation = { x = 1, y = 0, z = 1 }
boxes = {}
boxes[1] = { x = 1, y = 0, z = 0 }
boxes[2] = { x = 3, y = 0, z = 0 }
boxes[3] = { x = 5, y = 0, z = 0 }
boxes[4] = { x = 1, y = -2, z = 0 }
boxes[5] = { x = 3, y = -2, z = 0 }
boxes[6] = { x = 5, y = -2, z = 0 }
boxes[7] = { x = 1, y = -4, z = 0 }
boxes[8] = { x = 3, y = -4, z = 0 }
boxes[9] = { x = 5, y = -4, z = 0 }


template = askString("Template?")

global_ticker = 0

if fs.exists("rom/build/"..template) then
    template = "rom/build/"..template
elseif fs.exists(template) == false then
    download(template)
end

if fs.exists(template) then
    bot = TGM.init(homeLocation.x,homeLocation.y,homeLocation.z,0)
    main()
else
    clearScreen()
    print("Template could not be found. Exiting")
end