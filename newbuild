local author = "mrkmg"
local project = "cc_turtle"
local branch = "master"

--TGM Def
TGM = {}
TGM.__index = TGM

function TGM.init(x,y,z,d)
    local grid = {}
    setmetatable(grid,TGM)
    grid.x = x or 1
    grid.y = y or 1
    grid.z = z or 1
    grid.d = d or 0
    grid.checkFuel = true
    grid.fuelback = false
    return grid
end

function TGM:rotateRight()
    turtle.turnRight()
    self.d = (self.d + 1) % 4
end

function TGM:rotateLeft()
    turtle.turnLeft()
    self.d = (self.d - 1) % 4
end


function TGM:forward(kt)
    self:refuel()
    if kt == true then
        while turtle.forward() == false do
            sleep(1)
        end
        if     self:getD() == 0 then self.y = self.y + 1
        elseif self:getD() == 1 then self.x = self.x + 1
        elseif self:getD() == 2 then self.y = self.y - 1
        elseif self:getD() == 3 then self.x = self.x - 1
        return true
    else
        if turtle.forward() then
            if     self:getD() == 0 then self.y = self.y + 1
            elseif self:getD() == 1 then self.x = self.x + 1
            elseif self:getD() == 2 then self.y = self.y - 1
            elseif self:getD() == 3 then self.x = self.x - 1
            return true
            end
        else
            sleep(1)
            return false
        end
    end
end

function TGM:back(kt)
    self:refuel()
    if kt == true then
        while turtle.back() == false do
            sleep(1)
        end
        if     self:getD() == 0 then self.y = self.y - 1
        elseif self:getD() == 1 then self.x = self.x - 1
        elseif self:getD() == 2 then self.y = self.y + 1
        elseif self:getD() == 3 then self.x = self.x + 1
        end
        return true
    else
        if turtle.back() then
            if     self:getD() == 0 then self.y = self.y - 1
            elseif self:getD() == 1 then self.x = self.x - 1
            elseif self:getD() == 2 then self.y = self.y + 1
            elseif self:getD() == 3 then self.x = self.x + 1
            end
            return true
        else
            sleep(1)
            return false
        end
    end
end

function TGM:up(kt)
    self:refuel()
    if kt == true then
        while turtle.up() == false do
            sleep(1)
        end
        self.z = self.z + 1
    else 
        if turtle.up() then
            self.z = self.z + 1
            return true
        else
            return false
        end
    end
end

function TGM:down(kt)
    self:refuel()
    if kt == true then
        while turtle.up == false do
            sleep(1)
        end
        self.z = self.z - 1
    else
        if turtle.down() then
            self.z = self.z - 1
        else
            sleep(1)
            return false
        end
    end
end

function TGM:rotateTo(d)
    if self.d == 0  then
        if d == 1 then
            self:rotateRight()
        elseif d == 2 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 3 then
            self:rotateLeft()
        end
    elseif self.d == 1 then
        if d == 2 then
            self:rotateRight()
        elseif d == 3 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 0 then
            self:rotateLeft()
        end
    elseif self.d == 2 then
        if d == 3 then
            self:rotateRight()
        elseif d == 0 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 1 then
            self:rotateLeft()
        end
    elseif self.d == 3  then
        if d == 0 then
            self:rotateRight()
        elseif d == 1 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 2 then
            self:rotateLeft()
        end
    end
end

function TGM:gotoX(x)
    -- X
    if self:getX() ~= x then
        if self:getD() == 0 or self:getD() == 2 then self:rotateTo(1) end
        while self:getX() < x do
            sleep(0.1)
            if self:getD() == 1 then
                self:forward()
            else 
                self:back()
            end
        end
        while self:getX() > x do
            sleep(0.1)
            if self:getD() == 1 then
                self:back()
            else 
                self:forward()
            end
        end
    end
end

function TGM:gotoY(y)
    -- Y
    if self:getY() ~= y then
        if self:getD() == 1 or self:getD() == 3 then self:rotateTo(0) end
        while self:getY() < y do
            sleep(0.1)
            if self:getD() == 0 then
                self:forward()
            else 
                self:back()
            end
        end
        while self:getY() > y do
            sleep(0.1)
            if self:getD() == 0 then
                self:back()
            else 
                self:forward()
            end
        end
    end
end

function TGM:gotoZ(z)
    -- Z
    while self:getZ() < z do
        self:up()
        sleep(0.1)
    end
    while self:getZ() > z do
        sleep(0.1)
        self:down()
    end
end

function TGM:moveTo(x,y,z)
    self:gotoX(x)
    self:gotoY(y)
    self:gotoZ(z)
end

function TGM:moveToReverse(x,y,z)
    self:gotoZ(z)
    self:gotoY(y)
    self:gotoX(x)
end

function TGM:refuel()
    if self.checkFuel then
        if turtle.getFuelLevel() == 0 then
            if turtle.getItemCount(16) <= 3 and self.fuelback == false then
                self.fuelback = true
                turtle.select(16)
                turtle.refuel(1)
                sleep(0.1)
                local returnX = self:getX()
                local returnY = self:getY()
                local returnZ = self:getZ()
                local returnD = self:getD()
                self:moveToReverse(1,0,1)
                while turtle.getItemCount(16) <= 3 do
                    clearScreen()
                    print("Waiting for fuel, press enter when ready")
                    read()
                end
                self.fuelback = false
                sleep(0.1)
                self:moveTo(returnX,returnY,returnZ)
                self:rotateTo(returnD)
            else
                turtle.select(16)
                turtle.refuel(1)
            end
            return true
        end
        return true
    else
        return true
    end
end

function TGM:getX()
    return self.x
end

function TGM:getY()
    return self.y
end

function TGM:getZ()
    return self.z
end

function TGM:getD()
    return self.d
end

function pickupMatsForPlan(plan,currentI)
    local slots = {}
        slots[1] = 0
        slots[2] = 0
        slots[3] = 0
        slots[4] = 0
        slots[5] = 0
        slots[6] = 0
        slots[7] = 0
        slots[7] = 0
        slots[8] = 0
        slots[9] = 0
        slots[10] = 0
        slots[11] = 0
        slots[12] = 0
        slots[13] = 0
        slots[14] = 0
        slots[15] = 0

    local map = {}
        map[1] = 0
        map[2] = 0
        map[3] = 0
        map[4] = 0
        map[5] = 0
        map[6] = 0
        map[7] = 0
        map[7] = 0
        map[8] = 0
        map[9] = 0
        map[10] = 0
        map[11] = 0
        map[12] = 0
        map[13] = 0
        map[14] = 0
        map[15] = 0

    local con = true
    local ci = currentI
    local ti = table.maxn(plan)
    local cSlot = 0
    local dSlot = 0
    local dType = 0
    
    while con == true do
        cSlot = 1
        dSlot = 0
        dType = plan[ci].b
        while cSlot < 16 and dSlot == 0 do
            if map[cSlot] == 0 or ( map[cSlot] == dType and slots[cSlot] < 64 ) then
                dSlot = cSlot
            end
            cSlot = cSlot + 1
        end
        if dSlot == 0 then
            con = false
        else 
            map[dSlot] = dType
            slots[dSlot] = slots[dSlot] + 1
        end

        if ci == ti then con = false end
        ci = ci + 1
    end


    local returnX = bot:getX()
    local returnY = bot:getY()
    local returnZ = bot:getZ()
    local returnD = bot:getD()
    
    for ai = 1, 15 do
        if map[ai] > 0 then
            refillTo(map[ai],i,slots[ai])
            if ai < 15 and turtle.getItemCount(ai+1) > 0 then
                turtle.select(ai+1)
                turtle.dropDown()
            end
        end
    end

    bot:moveToReverse(returnX,returnY,returnZ)

    local r = {}
    r.slots=slots
    r.map=map
    r.maxI=ci
    return r
end

function refillTo(box,slot,count)
    local box = boxes[item]

    bot:moveTo(box.x,box.y,box.z+1)
    turtle.select(slot)
    while turtle.getItemCount(slot) < count do
        while turtle.suckDown() == false do
            print("Please refill crate " .. item .. " and press enter.")
            read()
        end
    end

    if turtle.getItemCount(slot) > count then
        turtle.dropDown(turtle.getItemCount(slot) - count)
    end
end