-- Stairs by MrKMG
-- Version 1

--TGM Def
TGM = {}
TGM.__index = TGM

function TGM.init(x,y,z,d)
    local grid = {}
    setmetatable(grid,TGM)
    grid.x = x or 1
    grid.y = y or 1
    grid.z = z or 1
    grid.d = d or 0
    grid.checkFuel = true
    return grid
end

function TGM:rotateRight()
    turtle.turnRight()
    self.d = (self.d + 1) % 4
end

function TGM:rotateLeft()
    turtle.turnLeft()
    self.d = (self.d - 1) % 4
end


function TGM:forward()
    if self.checkFuel then self:refuel() end
    if turtle.forward() then
        if     self:getD() == 0 then self.y = self.y + 1
        elseif self:getD() == 1 then self.x = self.x + 1
        elseif self:getD() == 2 then self.y = self.y - 1
        elseif self:getD() == 3 then self.x = self.x - 1
        return true
        end
    else
        sleep(1)
        return false
    end
end

function TGM:back()
    if self.checkFuel then self:refuel() end
    if turtle.back() then
        if     self:getD() == 0 then self.y = self.y - 1
        elseif self:getD() == 1 then self.x = self.x - 1
        elseif self:getD() == 2 then self.y = self.y + 1
        elseif self:getD() == 3 then self.x = self.x + 1
        end
        return true
    else
        sleep(1)
        return false
    end
end

function TGM:up()
    if self.checkFuel then self:refuel() end
    if turtle.up() then
        self.z = self.z + 1
        return true
    else
        return false
    end
end

function TGM:down()
    if self.checkFuel then self:refuel() end
    if turtle.down() then
        self.z = self.z - 1
    else
        sleep(1)
        return false
    end
end

function TGM:rotateTo(d)
    if self.d == 0  then
        if d == 1 then
            self:rotateRight()
        elseif d == 2 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 3 then
            self:rotateLeft()
        end
    elseif self.d == 1 then
        if d == 2 then
            self:rotateRight()
        elseif d == 3 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 0 then
            self:rotateLeft()
        end
    elseif self.d == 2 then
        if d == 3 then
            self:rotateRight()
        elseif d == 0 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 1 then
            self:rotateLeft()
        end
    elseif self.d == 3  then
        if d == 0 then
            self:rotateRight()
        elseif d == 1 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 2 then
            self:rotateLeft()
        end
    end
end

function TGM:gotoX(x)
    -- X
    if self:getX() ~= x then
        if self:getD() == 0 or self:getD() == 2 then self:rotateTo(1) end
        while self:getX() < x do
            sleep(0.1)
            if self:getD() == 1 then
                self:forward()
            else 
                self:back()
            end
        end
        while self:getX() > x do
            sleep(0.1)
            if self:getD() == 1 then
                self:back()
            else 
                self:forward()
            end
        end
    end
end

function TGM:gotoY(y)
    -- Y
    if self:getY() ~= y then
        if self:getD() == 1 or self:getD() == 3 then self:rotateTo(0) end
        while self:getY() < y do
            sleep(0.1)
            if self:getD() == 0 then
                self:forward()
            else 
                self:back()
            end
        end
        while self:getY() > y do
            sleep(0.1)
            if self:getD() == 0 then
                self:back()
            else 
                self:forward()
            end
        end
    end
end

function TGM:gotoZ(z)
    -- Z
    while self:getZ() < z do
        self:up()
        sleep(0.1)
    end
    while self:getZ() > z do
        sleep(0.1)
        self:down()
    end
end

function TGM:moveTo(x,y,z)
    self:gotoX(x)
    self:gotoY(y)
    self:gotoZ(z)
end

function TGM:moveToReverse(x,y,z)
    self:gotoZ(z)
    self:gotoY(y)
    self:gotoX(x)
end

function TGM:refuel()
    if turtle.getFuelLevel() == 0 then
        while turtle.getItemCount(16) == 0 do
            clearScreen()
            print("Waiting for fuel, press enter when ready")
            read()
        end
        turtle.select(16)
        turtle.refuel(1)
    end
    return true
end

function TGM:getX()
    return self.x
end

function TGM:getY()
    return self.y
end

function TGM:getZ()
    return self.z
end

function TGM:getD()
    return self.d
end

function writeAt(string, columnVar, rowVar)
    term.setCursorPos( columnVar, rowVar )
    write(string)
end

function clearScreen()
    term.clear()
    writeAt("Stairs",5,1)
    term.setCursorPos( 1, 3 )
end

Dig = {}
Dig.__index = Dig

function Dig.init()
    local digitem = {}
    setmetatable(digitem,Dig)
    return digitem
end

function Dig:forward()
    local count = 0
    while turtle.detect() and count <= 256 do
        turtle.dig()
        count = count + 1
        sleep(1)
    end
    if count == 256 then
        return false
    else
        return true
    end
end

function Dig:up()
    local count = 0
    while turtle.detectUp() and count <= 256 do
        turtle.digUp()
        count = count + 1
        sleep(1)
    end
    if count == 256 then
        return false
    else
        return true
    end
end

function Dig:down()
    local count = 0
    while turtle.detectDown() and count <= 256 do
        turtle.digDown()
        count = count + 1
        sleep(1)
    end
    if count == 256 then
        return false
    else
        return true
    end
end

function checkItemsAndEmpty()
    local c
    local goEmpty = true
    for c = 1, 14 do
        if goEmpty and turtle.getItemCount(c) == 0 then
            goEmpty = false
        end
    end

    if goEmpty then
        local returnX = bot:getX()
        local returnY = bot:getY()
        local returnZ = bot:getZ()
        local returnD = bot:getD()
        bot:moveTo(1,0,1)
        bot:rotateTo(1)
        for c = 1, 14 do
            turtle.select(c)
            turtle.drop()
        end
        bot:moveToReverse(returnX,returnY,returnZ)
        bot:rotateTo(returnD)
    end
end


function placeTorch(x,y,z)
    if turtle.getItemCount(15) > 0 then
        if ( x % 5 ) == 1 and ( y % 5) == 1 and ( z ) == 2 then
            turtle.select(15)
            turtle.placeDown()
            turtle.select(1)
        end
    end
end

function askNumber(question)
    local ans
    local cont = true
    -- clearScreen()
    while cont == true do 
        print(question)
        ans = tonumber(read())
        -- clearScreen()
        if ans == nil then
            print( "Please answer with a number." )
        elseif ans > 0 then
            cont = false
        elseif ans == 0 then
            print( "Must be greater than 0." )
        else
            print( "Must be positive." )
        end
    end
    return ans
end

function buildMats()
    local cont = true
    local count = 0
    while cont do
        if turtle.getItemCount(15 - count) > 0 then
            count = count + 1
        else
            cont = false
        end
    end
end

function placeDown()
    if numBuildmats > 0 then
        if turtle.getItemCount(16-numBuildMats) > 0 then
            turtle.select(16-numBuildMats)
            turtle.placeDown()
        else
            numBuildmats = numBuildmats - 1
            placeDown()
        end
    end
end

depth = askNumber("Depth?")

numBuildmats = buildMats()

bot = TGM.init(1,0,1,0)
dig = Dig.init()

bot:up()
for cd = 1, depth do
    dig:forward()
    bot:forward()
    dig:up()
    dig:down()
    bot:rotateTo(1)
    dig:forward()
    bot:forward()
    dig:up()
    dig:down()
    bot:down()
    dig:down()
    if numBuildmats > 0 then
        bot:down()
        if turtle.detectDown() == false then placeDown() end
        bot:up()
    end
    bot:back()
    dig:down()
    if numBuildmats > 0 then
        bot:down()
        if turtle.detectDown() == false then placeDown() end
        bot:up()
    end
    bot:rotateTo(0)
    dig:forward()
    bot:forward()
    dig:up()
    dig:down()
    if numBuildmats > 0 then
        bot:down()
        if turtle.detectDown() == false then placeDown() end
        bot:up()
    end
    rotateTo(1)
    dig:forward()
    bot:forward()
    dig:up()
    dig:down()
    if numBuildmats > 0 then
        bot:down()
        if turtle.detectDown() == false then placeDown() end
        bot:up()
    end
    bot:back()
    rotateTo(0)
end


