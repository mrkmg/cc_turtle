-- Builder by MrKMG
-- Version 1
local author = "mrkmg"
local project = "cc_turtle"
local branch = "master"
--TGM Def
Dig = {}
Dig.__index = Dig

function Dig.init()
    local dig = {}
    setmetatable(dig,Dig)
    dig.collectBlocks = true
    return dig
end

function Dig:forward()
    local count = 0
    while turtle.detect() and count <= 256 do
        turtle.dig()
        count = count + 1
        sleep(1)
    end
    if count == 256 then
        return false
    else
        return true
    end
end

function Dig:up()
    local count = 0
    while turtle.detectUp() and count <= 256 do
        turtle.digUp()
        count = count + 1
        sleep(1)
    end
    if count == 256 then
        return false
    else
        return true
    end
end

function Dig:down()
    local count = 0
    while turtle.detectDown() and count <= 256 do
        turtle.digDown()
        count = count + 1
        sleep(1)
    end
    if count == 256 then
        return false
    else
        return true
    end
end

--TGM Def
TGM = {}
TGM.__index = TGM

function TGM.init(x,y,z,d)
    local grid = {}
    setmetatable(grid,TGM)
    grid.x = x or 1
    grid.y = y or 1
    grid.z = z or 1
    grid.d = d or 0
    return grid
end

function TGM:rotateRight()
    turtle.turnRight()
    self.d = (self.d + 1) % 4
end

function TGM:rotateLeft()
    turtle.turnLeft()
    self.d = (self.d - 1) % 4
end


function TGM:forward()
    self:refuel()
    if turtle.forward() then
        if     self:getD() == 0 then self.y = self.y + 1
        elseif self:getD() == 1 then self.x = self.x + 1
        elseif self:getD() == 2 then self.y = self.y - 1
        elseif self:getD() == 3 then self.x = self.x - 1
        return true
        end
    else
        sleep(1)
        return false
    end
end

function TGM:back()
    self:refuel()
    if turtle.back() then
        if     self:getD() == 0 then self.y = self.y - 1
        elseif self:getD() == 1 then self.x = self.x - 1
        elseif self:getD() == 2 then self.y = self.y + 1
        elseif self:getD() == 3 then self.x = self.x + 1
        end
        return true
    else
        sleep(1)
        return false
    end
end

function TGM:up()
    self:refuel()
    if turtle.up() then
        self.z = self.z + 1
        return true
    else
        return false
    end
end

function TGM:down()
    self:refuel()
    if turtle.down() then
        self.z = self.z - 1
    else
        sleep(1)
        return false
    end
end

function TGM:rotateTo(d)
    if self.d == 0  then
        if d == 1 then
            self:rotateRight()
        elseif d == 2 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 3 then
            self:rotateLeft()
        end
    elseif self.d == 1 then
        if d == 2 then
            self:rotateRight()
        elseif d == 3 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 0 then
            self:rotateLeft()
        end
    elseif self.d == 2 then
        if d == 3 then
            self:rotateRight()
        elseif d == 0 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 1 then
            self:rotateLeft()
        end
    elseif self.d == 3  then
        if d == 0 then
            self:rotateRight()
        elseif d == 1 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 2 then
            self:rotateLeft()
        end
    end
end

function TGM:moveTo(x,y,z)
    if self:getX() ~= x then
        -- X
        if self:getD() == 0 or self:getD() == 2 then self:rotateTo(1) end
        while self:getX() < x do
            sleep(0.1)
            if self:getD() == 1 then
                self:forward()
            else 
                self:back()
            end
        end
        while self:getX() > x do
            sleep(0.1)
            if self:getD() == 1 then
                self:back()
            else 
                self:forward()
            end
        end
    end
    -- Y
    if self:getY() ~= y then
        if self:getD() == 1 or self:getD() == 3 then self:rotateTo(0) end
        while self:getY() < y do
            sleep(0.1)
            if self:getD() == 0 then
                self:forward()
            else 
                self:back()
            end
        end
        while self:getY() > y do
            sleep(0.1)
            if self:getD() == 0 then
                self:back()
            else 
                self:forward()
            end
        end
    end
    -- Z
    while self:getZ() < z do
        self:up()
        sleep(0.1)
    end
    while self:getZ() > z do
        sleep(0.1)
        self:down()
    end
end

function TGM:moveToReverse(x,y,z)
    -- Z
    while self:getZ() < z do
        self:up()
        sleep(0.1)
    end
    while self:getZ() > z do
        sleep(0.1)
        self:down()
    end
    -- Y
    if self:getY() ~= y then
        if self:getD() == 1 or self:getD() == 3 then self:rotateTo(0) end
        while self:getY() < y do
            sleep(0.1)
            if self:getD() == 0 then
                self:forward()
            else 
                self:back()
            end
        end
        while self:getY() > y do
            sleep(0.1)
            if self:getD() == 0 then
                self:back()
            else 
                self:forward()
            end
        end
    end
    if self:getX() ~= x then
        -- X
        if self:getD() == 0 or self:getD() == 2 then self:rotateTo(1) end
        while self:getX() < x do
            sleep(0.1)
            if self:getD() == 1 then
                self:forward()
            else 
                self:back()
            end
        end
        while self:getX() > x do
            sleep(0.1)
            if self:getD() == 1 then
                self:back()
            else 
                self:forward()
            end
        end
    end
end

function TGM:refuel()
    if turtle.getFuelLevel() == 0 then
        while turtle.getItemCount(16) == 0 do
            clearScreen()
            print("Waiting for fuel, press enter when ready")
            read()
        end
        turtle.select(16)
        turtle.refuel(1)
        return true
    end
    return true
end

function TGM:getX()
    return self.x
end

function TGM:getY()
    return self.y
end

function TGM:getZ()
    return self.z
end

function TGM:getD()
    return self.d
end

function writeAt(string, columnVar, rowVar)
    term.setCursorPos( columnVar, rowVar )
    write(string)
end

function clearScreen()
    term.clear()
    writeAt("Build",5,1)
    term.setCursorPos( 1, 3 )
end

function askString(question)
    local ans
    local cont = true
    clearScreen()
    while cont == true do -- Width Question
        print(question)
        ans = read()
        clearScreen()
        if ans == nil then
            print( "Please answer with something" )
        else
            cont = false
        end
    end
    return ans
end

function askNumber(question,default)
    local ans
    local cont = true
    clearScreen()
    if default then question = question.." ("..default..")" end
    while cont == true do -- Width Question
        print(question)
        ans = tonumber(read())
        clearScreen()
        if ans == nil and default then
            ans = default
            cont = false
        elseif ans == nil then
            print( "Please answer with a number." )
        elseif ans > 0 then
            cont = false
        elseif ans == 0 then
            print( "Must be greater than 0." )
        else
            print( "Must be positive." )
        end
    end
    return ans
end

function getLink(file)
    return "https://raw.github.com/" .. author .. "/" .. project .. "/" .. branch .. "/" .. "templates/" .. file
end

function download(file)
    print("Downloading, " .. file)
    local data = http.get(getLink(file))
    if data then
        print(file .. " downloaded")
        local file = fs.open(file,"w")
        file.write(data.readAll())
        file.close()
        return true
    end
end

function getSlotForItem(item)
    local cSlot = item
    local good = false
    while cSlot < 16 and good == false do
        if turtle.getItemCount(slot) == 0 then
            cSlot = cSlot + num_mats
        else
            good = true;
        end
    end
    if good == true then
        return cSlot
    else
        return 0
    end
end

function refillItem(item)
    local returnX = bot:getX()
    local returnY = bot:getY()
    local returnZ = bot:getZ()
    local returnD = bot:getD()
    local box = boxes[item]
    local pickedUpSome = false

    while cSlot < 16 do
        if turtle.getItemCount(cSlot) == 0 then
            bot:moveTo(box.x,box.y,box.z+1)
            turtle.select(cSlot)
            while pickedUpSome == false and turtle.suckDown() == false do
                print("Please refill crate " .. item .. " and press enter.")
                read()
            end
            pickedUpSome = true;
        end
        cSlot = cSlot + num_mats
    end
    bot:moveToReverse(returnX,returnY,returnZ)
    bot:rotateTo(returnD)
end

function placeDown(item)
    local slot = getSlotForItem(item)
    if slot == 0 then 
        refillItem(item)
        slot = getSlotForItem(item)
    end
    turtle.select(slot)
    turtle.placeDown()
end

function getNextInLayer(layer)
    local n = {x=0,y=0}
    for y,t in ipairs(layer) do
        if n.x == 0 and n.y == 0 then
            for x,v in ipairs(t) do
                if n.x == 0 and n.y == 0 and v > 0 then
                    n.x = x
                    n.y = y
               end
            end
        end
    end
    return n
end

function makeLayerPlan(layer)
    local plan = {}
    local planOffset = 1
    local n = getNextInLayer(layer)
    if n.x ~= 0 and n.y ~= 0 then
        plan[planOffset] = {x=n.x,y=n.y,b=layer[n.y][n.x]}
        planOffset = planOffset + 1
    end
    while n.x ~= 0 and n.y ~= 0 do
        layer[n.y][n.x] = 0
        if layer[n.y] and layer[n.y][n.x+1] and layer[n.y][n.x+1] > 0 then
            plan[planOffset] = {x=n.x+1,y=n.y,b=layer[n.y][n.x+1]}
            planOffset = planOffset + 1
            n = {x=n.x+1,y=n.y}
        elseif layer[n.y] and layer[n.y][n.x-1] and layer[n.y][n.x-1] > 0 then
            plan[planOffset] = {x=n.x-1,y=n.y,b=layer[n.y][n.x-1]}
            planOffset = planOffset + 1
            n = {x=n.x-1,y=n.y}
        elseif layer[n.y+1] and layer[n.y+1][n.x] and layer[n.y+1][n.x] > 0 then
            plan[planOffset] = {x=n.x,y=n.y+1,b=layer[n.y+1][n.x]}
            planOffset = planOffset + 1
            n = {x=n.x,y=n.y+1}
        elseif layer[n.y-1] and layer[n.y-1][n.x] and layer[n.y-1][n.x] > 0 then
            plan[planOffset] = {x=n.x,y=n.y-1,b=layer[n.y-1][n.x]}
            planOffset = planOffset + 1
            n = {x=n.x,y=n.y-1}
        else 
            n = getNextInLayer(layer)
            if n.x ~= 0 and n.y ~= 0 then
                plan[planOffset] = {x=n.x,y=n.y,b=layer[n.y][n.x]}
                planOffset = planOffset + 1
            end
        end
    end
    return plan
end

function runPlan(plan,z)
    local current
    local buildHeight = z + 1
    bot:moveTo(bot:getX(),bot:getY(),buildHeight)
    for i=1, table.maxn(plan) do
        current = plan[i]
        bot:moveTo(current.x,current.y,buildHeight)
        placeDown(current.b)
    end
end


function main()
    for s=1,num_mats do
        checkAndRefillSlot(s)
    end
    local height = 1;
    log = fs.open('log',"w")
    local f = fs.open(template, "r")
    local z = 1
    local y = 0
    local item = 0
    local len = 0
    local plan = {}
    local layer = {}
    local line = f.readLine()

    while line ~= nil do
        y = y + 1
        len = line:len()
        if len > 0 then
            layer[y] = {}
            for x = 1, len do
                item = tonumber(line:sub(x,x))
                if item == nil or item == 0 or item > num_mats then
                    layer[y][x] = 0
                else
                    layer[y][x] = item
                end
            end
        else
            plan = makeLayerPlan(layer)
            runPlan(plan,z);
            layer = {}
            z = z + 1
            y = 0
        end
        line = f.readLine()
    end
    bot:moveTo(homeLocation.x,homeLocation.y,homeLocation.z)
end

homeLocation = { x = 1, y = 0, z = 1 }
boxes = {}
boxes[1] = { x = 1, y = 0, z = 0 }
boxes[2] = { x = 3, y = 0, z = 0 }
boxes[3] = { x = 5, y = 0, z = 0 }
boxes[4] = { x = 1, y = -2, z = 0 }
boxes[5] = { x = 3, y = -2, z = 0 }
boxes[6] = { x = 5, y = -2, z = 0 }
boxes[7] = { x = 1, y = -4, z = 0 }
boxes[8] = { x = 3, y = -4, z = 0 }
boxes[9] = { x = 5, y = -4, z = 0 }

template = askString("Template?")
num_mats = askNumber("Number of materials?",9)

if fs.exists("rom/build/"..template) then
    template = "rom/build/"..template
elseif fs.exists(template) == false then
    download(template)
end

if fs.exists(template) then
    bot = TGM.init(1,0,1,0)
    main()
else
    clearScreen()
    print("Template could not be found. Exiting")
end
